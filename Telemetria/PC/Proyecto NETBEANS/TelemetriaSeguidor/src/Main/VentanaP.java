/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Main;

import Comunications.BotCommunicator;
import Graficas.GraficaPID;
import Graficas.GraficaPWM;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.Action;
import javax.swing.JOptionPane;
import javax.swing.Timer;
/**
 *
 * @author jesus
 */
public class VentanaP extends javax.swing.JFrame {
    BotCommunicator communicator;
    
    protected int PWMRight, PWMLeft, position, cycleTime;
    protected double proporcionalConst, derivativeConst, integralConst;
    protected double proportionalFRobot, derivativeFRobot, integralFRobot, plusValuesFRobot;
    protected int encoderA1, encoderA2, encoderB1, encoderB2;
    
    protected ArrayList<Integer> PWMRList, PWMLList, positionList, cycleTimeList;
    protected ArrayList<Double> proportionalFRobotList, derivativeFRobotList, integralFRobotList, plusValuesFRobotList;
    
    protected String comandLineText = "";
    
    private BotCommunicatorTimer readerTimer;
    private BotCommunicatorTimer writerTimer;
    private int consoleLineCounter;
    
    private static GraficaPWM graficaPWM = null;
    private static GraficaPID graficaPID = null;
    private Random rnd = new Random();
    
    /**
     * Creates new form VentanaP
     */
    public VentanaP() {
        initComponents();
        iniciar();
        this.setTitle("Telemetr√≠a seguidor LabPrototipos UNET");
        
        communicator=new BotCommunicator();
        //comm.start();
        this.PWMLList=new ArrayList();
        this.PWMRList=new ArrayList();
        this.positionList=new ArrayList();
        this.cycleTimeList=new ArrayList();
        this.proportionalFRobotList=new ArrayList();
        this.derivativeFRobotList=new ArrayList();
        this.integralFRobotList=new ArrayList();
        this.plusValuesFRobotList=new ArrayList();
        readerTimer = new BotCommunicatorTimer(20, new ReadFromBotCommunicatorTimerActionListener());
        writerTimer = new BotCommunicatorTimer(5000, new WriteToBotCommunicatorTimerActionListener());
        consoleLineCounter = 0;
        
        PWMLeft=PWMRight=position=cycleTime=0;
        proporcionalConst=derivativeConst=integralConst=proportionalFRobot=derivativeFRobot=integralFRobot=plusValuesFRobot=0;
        encoderA1=encoderA2=encoderB1=encoderB2=0;

        
        Timer timer = new Timer(200, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                /*setPWMLeft(((getPWMLeft() <= 200)?1:-1)*rnd.nextInt(20)+getPWMLeft());
                setPWMRight(((getPWMRight()<= 200)?1:-1)*rnd.nextInt(20)+getPWMRight());*/
                setPWMLeft(rnd.nextInt(256));
                setPWMRight(rnd.nextInt(256));
                setCycleTime(rnd.nextInt(40));
                
                setDerivativeFRobot(rnd.nextDouble()+rnd.nextInt(1000));
                setIntegralFRobot(rnd.nextDouble()+rnd.nextInt(1000));
                setProportionalFRobot(rnd.nextDouble()+rnd.nextInt(1000));
                
                if(graficaPWM != null)
                    graficaPWM.agregarASeries(getPWMLeft(), getPWMRight(),getCycleTime());
                
                if(graficaPID != null)
                    graficaPID.agregar(getProportionalFRobot(), getIntegralFRobot(), getDerivativeFRobot());
            }
        });
        
        timer.start();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelConstantesPID = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        textFieldConstantesPID_P = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        textFieldConstantesPID_I = new javax.swing.JTextField();
        textFieldConstantesPID_D = new javax.swing.JTextField();
        buttonCPID_Cambiar = new javax.swing.JButton();
        panelPWM = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        textFieldPWMI = new javax.swing.JTextField();
        textFieldPWMD = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        textFieldTiempoCiclo = new javax.swing.JTextField();
        progressBarPWMI = new javax.swing.JProgressBar();
        progressBarPWMD = new javax.swing.JProgressBar();
        buttonGraficaPWM = new javax.swing.JButton();
        jSlider3 = new javax.swing.JSlider();
        panelEncoders = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        textFieldEncodersA1 = new javax.swing.JTextField();
        textFieldEncodersB1 = new javax.swing.JTextField();
        textFieldEncodersA2 = new javax.swing.JTextField();
        textFieldEncodersB2 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        panelProcesoPID = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        textFieldPPID_P = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        textFieldPPID_I = new javax.swing.JTextField();
        textFieldPPID_D = new javax.swing.JTextField();
        textFieldPPID_Suma = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        buttonGraficaPID = new javax.swing.JButton();
        panelConexion = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        buttonConectar = new javax.swing.JButton();
        buttonDesconectar = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaCommandLine = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(139, 208, 249));

        panelConstantesPID.setBackground(new java.awt.Color(175, 221, 248));
        panelConstantesPID.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelConstantesPID.setName("Variables PID"); // NOI18N

        jLabel1.setText("Constantes PID");

        textFieldConstantesPID_P.setText("jTextField1");

        jLabel2.setLabelFor(textFieldConstantesPID_P);
        jLabel2.setText("P");

        jLabel3.setLabelFor(textFieldConstantesPID_I);
        jLabel3.setText("I");

        jLabel4.setLabelFor(textFieldConstantesPID_D);
        jLabel4.setText("D");

        textFieldConstantesPID_I.setText("jTextField4");

        textFieldConstantesPID_D.setText("jTextField5");

        buttonCPID_Cambiar.setText("Cambiar");
        buttonCPID_Cambiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCPID_CambiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelConstantesPIDLayout = new javax.swing.GroupLayout(panelConstantesPID);
        panelConstantesPID.setLayout(panelConstantesPIDLayout);
        panelConstantesPIDLayout.setHorizontalGroup(
            panelConstantesPIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelConstantesPIDLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelConstantesPIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(panelConstantesPIDLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(panelConstantesPIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelConstantesPIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textFieldConstantesPID_P, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textFieldConstantesPID_I, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textFieldConstantesPID_D, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonCPID_Cambiar))))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        panelConstantesPIDLayout.setVerticalGroup(
            panelConstantesPIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelConstantesPIDLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelConstantesPIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldConstantesPID_P, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(panelConstantesPIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(textFieldConstantesPID_I, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelConstantesPIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(textFieldConstantesPID_D, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(buttonCPID_Cambiar)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        panelPWM.setBackground(new java.awt.Color(175, 221, 248));
        panelPWM.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setText("PWM");

        jLabel6.setLabelFor(jLabel2);
        jLabel6.setText("Izquierdo");

        jLabel7.setLabelFor(textFieldPWMD);
        jLabel7.setText("Derecho");

        textFieldPWMI.setText("255");
        textFieldPWMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldPWMIActionPerformed(evt);
            }
        });

        textFieldPWMD.setText("255");

        jLabel13.setText("Tiempo de Ciclo");

        textFieldTiempoCiclo.setText("jTextField10");

        progressBarPWMI.setMaximum(255);

        progressBarPWMD.setMaximum(255);

        buttonGraficaPWM.setText("Grafica");
        buttonGraficaPWM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGraficaPWMActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelPWMLayout = new javax.swing.GroupLayout(panelPWM);
        panelPWM.setLayout(panelPWMLayout);
        panelPWMLayout.setHorizontalGroup(
            panelPWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPWMLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonGraficaPWM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPWMLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textFieldTiempoCiclo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelPWMLayout.createSequentialGroup()
                        .addGroup(panelPWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(panelPWMLayout.createSequentialGroup()
                                .addGroup(panelPWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(panelPWMLayout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(progressBarPWMD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(panelPWMLayout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(progressBarPWMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelPWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textFieldPWMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textFieldPWMD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 10, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelPWMLayout.setVerticalGroup(
            panelPWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPWMLayout.createSequentialGroup()
                .addComponent(jLabel5)
                .addGap(36, 36, 36)
                .addGroup(panelPWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelPWMLayout.createSequentialGroup()
                        .addGroup(panelPWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(textFieldPWMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelPWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6)
                                .addComponent(progressBarPWMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(panelPWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelPWMLayout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(textFieldPWMD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelPWMLayout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(jLabel7))))
                    .addComponent(progressBarPWMD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelPWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldTiempoCiclo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(18, 18, 18)
                .addComponent(buttonGraficaPWM)
                .addContainerGap())
        );

        jSlider3.setMaximum(1000);
        jSlider3.setValue(500);

        panelEncoders.setBackground(new java.awt.Color(175, 221, 248));
        panelEncoders.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel8.setText("Encoders");

        textFieldEncodersA1.setText("jTextField6");

        textFieldEncodersB1.setText("jTextField7");

        textFieldEncodersA2.setText("jTextField8");

        textFieldEncodersB2.setText("jTextField9");

        jLabel9.setText("A1");

        jLabel10.setText("A2");

        jLabel11.setText("B2");

        jLabel12.setText("B1");

        javax.swing.GroupLayout panelEncodersLayout = new javax.swing.GroupLayout(panelEncoders);
        panelEncoders.setLayout(panelEncodersLayout);
        panelEncodersLayout.setHorizontalGroup(
            panelEncodersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEncodersLayout.createSequentialGroup()
                .addGroup(panelEncodersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(panelEncodersLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textFieldEncodersB1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelEncodersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelEncodersLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel8))
                        .addGroup(panelEncodersLayout.createSequentialGroup()
                            .addGap(14, 14, 14)
                            .addComponent(jLabel9)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(textFieldEncodersA1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelEncodersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addGroup(panelEncodersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textFieldEncodersA2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldEncodersB2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        panelEncodersLayout.setVerticalGroup(
            panelEncodersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEncodersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelEncodersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldEncodersA1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldEncodersA2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(panelEncodersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldEncodersB1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldEncodersB2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelProcesoPID.setBackground(new java.awt.Color(175, 221, 248));
        panelProcesoPID.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelProcesoPID.setName("Variables PID"); // NOI18N

        jLabel14.setText("Proceso PID");

        textFieldPPID_P.setText("jTextField1");

        jLabel15.setLabelFor(textFieldConstantesPID_P);
        jLabel15.setText("P");

        jLabel16.setLabelFor(textFieldConstantesPID_I);
        jLabel16.setText("I");

        jLabel17.setLabelFor(textFieldConstantesPID_D);
        jLabel17.setText("D");

        textFieldPPID_I.setText("jTextField4");

        textFieldPPID_D.setText("jTextField5");

        textFieldPPID_Suma.setText("jTextField5");

        jLabel18.setLabelFor(textFieldConstantesPID_D);
        jLabel18.setText("Suma");

        buttonGraficaPID.setText("Grafica");
        buttonGraficaPID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGraficaPIDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelProcesoPIDLayout = new javax.swing.GroupLayout(panelProcesoPID);
        panelProcesoPID.setLayout(panelProcesoPIDLayout);
        panelProcesoPIDLayout.setHorizontalGroup(
            panelProcesoPIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProcesoPIDLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelProcesoPIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelProcesoPIDLayout.createSequentialGroup()
                        .addGroup(panelProcesoPIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addGroup(panelProcesoPIDLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(panelProcesoPIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel17))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelProcesoPIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textFieldPPID_P, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textFieldPPID_I, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textFieldPPID_D, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(buttonGraficaPID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelProcesoPIDLayout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textFieldPPID_Suma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelProcesoPIDLayout.setVerticalGroup(
            panelProcesoPIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProcesoPIDLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelProcesoPIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldPPID_P, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(18, 18, 18)
                .addGroup(panelProcesoPIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(textFieldPPID_I, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelProcesoPIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(textFieldPPID_D, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelProcesoPIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(textFieldPPID_Suma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonGraficaPID)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        panelConexion.setBackground(new java.awt.Color(175, 221, 248));

        jLabel19.setText("Conexi√≥n Bluetooth");

        buttonConectar.setText("Conectar");
        buttonConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConectarActionPerformed(evt);
            }
        });

        buttonDesconectar.setText("Desconectar");
        buttonDesconectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDesconectarActionPerformed(evt);
            }
        });

        jLabel20.setText("No se encuentra conectado");

        javax.swing.GroupLayout panelConexionLayout = new javax.swing.GroupLayout(panelConexion);
        panelConexion.setLayout(panelConexionLayout);
        panelConexionLayout.setHorizontalGroup(
            panelConexionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelConexionLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(buttonConectar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(buttonDesconectar)
                .addGap(52, 52, 52))
            .addGroup(panelConexionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelConexionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19)
                    .addComponent(jLabel20))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelConexionLayout.setVerticalGroup(
            panelConexionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelConexionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19)
                .addGap(38, 38, 38)
                .addGroup(panelConexionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonConectar)
                    .addComponent(buttonDesconectar))
                .addGap(18, 18, 18)
                .addComponent(jLabel20)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        textAreaCommandLine.setEditable(false);
        textAreaCommandLine.setColumns(20);
        textAreaCommandLine.setRows(5);
        jScrollPane1.setViewportView(textAreaCommandLine);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelConstantesPID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panelPWM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panelProcesoPID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSlider3, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(panelEncoders, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(38, 38, 38)
                            .addComponent(panelConexion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSlider3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(panelConstantesPID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelPWM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(panelProcesoPID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelEncoders, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelConexion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textFieldPWMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldPWMIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldPWMIActionPerformed

    private void buttonCPID_CambiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCPID_CambiarActionPerformed
        try{
            float p = Float.parseFloat(textFieldConstantesPID_P.getText()), i = Float.parseFloat(textFieldConstantesPID_I.getText()), d = Float.parseFloat(textFieldConstantesPID_D.getText());
            
            setCommandLineText("Proporcional="+p+"/Derivatio="+d+"/Integral="+i);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "ERROR!!"+ e.getMessage()+" No es un valor v√°lido. (Error en actualizacion de PID)", "Error en actualizaci√≥n de PID", JOptionPane.ERROR_MESSAGE);
            setCommandLineText("ERROR!!"+ e.getMessage()+" No es un valor v√°lido. (Error en actualizacion de PID)");
        }
    }//GEN-LAST:event_buttonCPID_CambiarActionPerformed

    private void buttonConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConectarActionPerformed
       boolean conectado = communicator.iniciar();
        
        if(conectado){
            readerTimer.start();
            buttonConectar.setBackground(Color.GREEN);
            buttonDesconectar.setBackground(Color.GREEN);
            
            jLabel20.setText(communicator.getPuertoSeleccionado());
            setCommandLineText("Message: Conectado satisfactoriamente al puerto serial.");
        }else{
            setCommandLineText("ERROR: Ocurri√≥ un error al tratar de conectarse al puerto serial.");
        }
        
    }//GEN-LAST:event_buttonConectarActionPerformed

    private void buttonDesconectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDesconectarActionPerformed
        boolean desconectado = communicator.parar();
        
        if(desconectado){
            readerTimer.stop();
            buttonConectar.setBackground(Color.BLUE);
            buttonDesconectar.setBackground(Color.BLUE);
            jLabel20.setText("No se encuentra conectado.");
            setCommandLineText("Message: Desconectado satisfactoriamente del puerto serial.");
        }else{
            setCommandLineText("ERROR: No se pudo desconectar del puerto serial.");
        }
    }//GEN-LAST:event_buttonDesconectarActionPerformed

    private void buttonGraficaPWMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGraficaPWMActionPerformed
        if(graficaPWM == null)
            graficaPWM = new GraficaPWM(PWMLList,PWMRList,cycleTimeList);
        else
            graficaPWM.mostrarGrafica();
    }//GEN-LAST:event_buttonGraficaPWMActionPerformed

    private void buttonGraficaPIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGraficaPIDActionPerformed
        if(graficaPID == null)
            graficaPID = new GraficaPID(proportionalFRobotList,integralFRobotList,derivativeFRobotList);
        else
            graficaPID.mostrarGrafica();
    }//GEN-LAST:event_buttonGraficaPIDActionPerformed

    private void iniciar(){
        //this.jTextField1.setText("            ");
        this.textFieldConstantesPID_P.setEditable(true);
        
        //this.jTextField2.setText("           ");
        this.textFieldPWMI.setEditable(false);
        
        //this.jTextField3.setText("      ");
        this.textFieldPWMD.setEditable(false);
        
        //this.jTextField4.setText("              ");
        this.textFieldConstantesPID_I.setEditable(true);
        
        //this.jTextField5.setText("              ");
        this.textFieldConstantesPID_D.setEditable(true);
        
        this.textFieldEncodersA1.setEditable(false);
        
        this.textFieldEncodersB1.setEditable(false);
        this.textFieldEncodersA2.setEditable(false);
        this.textFieldEncodersB2.setEditable(false);
        this.textFieldTiempoCiclo.setEditable(false);
        this.textFieldPPID_P.setEditable(false);
        this.textFieldPPID_I.setEditable(false);
        this.textFieldPPID_Suma.setEditable(false);
        this.textFieldPPID_D.setEditable(false);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaP().setVisible(true);
                
            }
        });
    }

    public int getPWMRight() {
        return PWMRight;
    }

    public void setPWMRight(int PWMRight) {
        this.PWMRight = PWMRight;
        this.progressBarPWMD.setValue(PWMRight);
        this.textFieldPWMD.setText(""+PWMRight);
        this.PWMRList.add(PWMRight);
    }

    public int getPWMLeft() {
        return PWMLeft;
    }

    public void setPWMLeft(int PWMLeft) {
        this.PWMLeft = PWMLeft;
        this.progressBarPWMI.setValue(PWMLeft);
        this.textFieldPWMI.setText(""+PWMLeft);
        this.PWMLList.add(PWMLeft);
    }

    public int getPosition() {
        return position;
    }

    public void setPosition(int position) {
        this.position = position;
        this.jSlider3.setValue(position);
        this.positionList.add(position);
    }

    public int getCycleTime() {
        return cycleTime;
    }

    public void setCycleTime(int cycleTime) {
        this.cycleTime = cycleTime;
        this.textFieldTiempoCiclo.setText(cycleTime+"");
        this.cycleTimeList.add(cycleTime);
    }

    public double getProporcionalConst() {
        return proporcionalConst;
    }

    public void setProporcionalConst(double proporcionalConst) {
        this.proporcionalConst = proporcionalConst;
        this.textFieldConstantesPID_P.setText(proporcionalConst+"");
                
    }

    public double getDerivativeConst() {
        return derivativeConst;
    }

    public void setDerivativeConst(double derivativeConst) {
        this.derivativeConst = derivativeConst;
        this.textFieldConstantesPID_D.setText(derivativeConst+"");
    }

    public double getIntegralConst() {
        return integralConst;
    }

    public void setIntegralConst(double integralConst) {
        this.integralConst = integralConst;
        this.textFieldConstantesPID_I.setText(integralConst+"");
    }

    public double getProportionalFRobot() {
        return proportionalFRobot;
    }

    public void setProportionalFRobot(double proportionalFRobot) {
        this.proportionalFRobot = proportionalFRobot;
        this.textFieldPPID_P.setText(proportionalFRobot+"");
        this.proportionalFRobotList.add(proportionalFRobot);
    }

    public double getDerivativeFRobot() {
        return derivativeFRobot;
    }

    public void setDerivativeFRobot(double derivativeFRobot) {
        this.derivativeFRobot = derivativeFRobot;
        this.textFieldPPID_D.setText(derivativeFRobot+"");
        this.derivativeFRobotList.add(derivativeFRobot);
    }

    public double getIntegralFRobot() {
        return integralFRobot;
    }

    public void setIntegralFRobot(double integralFRobot) {
        this.integralFRobot = integralFRobot;
        this.textFieldPPID_I.setText(integralFRobot+"");
        this.integralFRobotList.add(integralFRobot);
    }

    public double getPlusValuesFRobot() {
        return plusValuesFRobot;
    }

    public void setPlusValuesFRobot(double plusValuesFRobot) {
        this.plusValuesFRobot = plusValuesFRobot;
        this.textFieldPPID_Suma.setText(plusValuesFRobot+"");
        this.plusValuesFRobotList.add(plusValuesFRobot);
////        
    }

    public int getEncoderA1() {
        return encoderA1;
    }

    public void setEncoderA1(int encoderA1) {
        this.encoderA1 = encoderA1;
        this.textFieldEncodersA1.setText(encoderA1+"");
    }

    public int getEncoderA2() {
        return encoderA2;
    }

    public void setEncoderA2(int encoderA2) {
        this.encoderA2 = encoderA2;
        this.textFieldEncodersA2.setText(encoderA2+"");
    }

    public int getEncoderB1() {
        return encoderB1;
    }

    public void setEncoderB1(int encoderB1) {
        this.encoderB1 = encoderB1;
        this.textFieldEncodersB1.setText(encoderB1+"");
    }

    public int getEncoderB2() {
        return encoderB2;
    }

    public void setEncoderB2(int encoderB2) {
        this.encoderB2 = encoderB2;
        this.textFieldEncodersB2.setText(encoderB2+"");
    }
    
    protected void readFromDataStream(){
        String incoming = null;
        
        if(this.communicator.getReader().isAvailable()){
            
            incoming = this.communicator.getReader().getEntrada();
            
            if(incoming != null){
                String[] cadenas = incoming.split("/");
                
                try{
                    setProportionalFRobot(Double.parseDouble(cadenas[0]));
                    setDerivativeFRobot(Double.parseDouble(cadenas[2]));
                    setIntegralFRobot(Double.parseDouble(cadenas[1]));
                    setPlusValuesFRobot(Double.parseDouble(cadenas[3]));
                    setPWMLeft(Integer.parseInt(cadenas[4]));
                    setPWMRight(Integer.parseInt(cadenas[5]));
                    setCycleTime(Integer.parseInt(cadenas[6]));
                    
                    if(graficaPWM != null){
                        graficaPWM.agregarASeries(this.getPWMLeft(), this.getPWMRight(), this.getCycleTime());
                    }
                }catch(Exception e){
                    setCommandLineText("\nERROR! Problema al convertir data entrante desde el InputStream en valores num√©ricos.\n");
                }
                setCommandLineText(consoleLineCounter+")"+incoming);
                consoleLineCounter++;
            }
        }
    }
    
    protected void writeToDataStream(String s){
        this.communicator.getSender().writeData(s);
    }
    
    protected void setCommandLineText(String s){
        this.comandLineText += (s+"\n");
        //writeToDataStream("Recibido:"+s+" --//\n");
        textAreaCommandLine.setText(comandLineText);
    }
    
    class BotCommunicatorTimer extends Timer{

        public BotCommunicatorTimer(int delay, ActionListener listener) {
            super(delay, listener);
        }
    } 
    
    class ReadFromBotCommunicatorTimerActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            //System.out.println("Listener.");
            readFromDataStream();
        }
        
    }
    
    class WriteToBotCommunicatorTimerActionListener implements ActionListener{

        @Override
        public void actionPerformed(ActionEvent ae) {
            System.out.println("Writer");
            writeToDataStream("asd");
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCPID_Cambiar;
    private javax.swing.JButton buttonConectar;
    private javax.swing.JButton buttonDesconectar;
    private javax.swing.JButton buttonGraficaPID;
    private javax.swing.JButton buttonGraficaPWM;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider3;
    private javax.swing.JPanel panelConexion;
    private javax.swing.JPanel panelConstantesPID;
    private javax.swing.JPanel panelEncoders;
    private javax.swing.JPanel panelPWM;
    private javax.swing.JPanel panelProcesoPID;
    private javax.swing.JProgressBar progressBarPWMD;
    private javax.swing.JProgressBar progressBarPWMI;
    private javax.swing.JTextArea textAreaCommandLine;
    private javax.swing.JTextField textFieldConstantesPID_D;
    private javax.swing.JTextField textFieldConstantesPID_I;
    private javax.swing.JTextField textFieldConstantesPID_P;
    private javax.swing.JTextField textFieldEncodersA1;
    private javax.swing.JTextField textFieldEncodersA2;
    private javax.swing.JTextField textFieldEncodersB1;
    private javax.swing.JTextField textFieldEncodersB2;
    private javax.swing.JTextField textFieldPPID_D;
    private javax.swing.JTextField textFieldPPID_I;
    private javax.swing.JTextField textFieldPPID_P;
    private javax.swing.JTextField textFieldPPID_Suma;
    private javax.swing.JTextField textFieldPWMD;
    private javax.swing.JTextField textFieldPWMI;
    private javax.swing.JTextField textFieldTiempoCiclo;
    // End of variables declaration//GEN-END:variables
}
